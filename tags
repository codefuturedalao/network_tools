!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARP	include/arp.h	2;"	d
ARP_ANS	include/arp.h	15;"	d
ARP_QUERY	include/arp.h	14;"	d
Arph	include/arp.h	/^} Arph;$/;"	t	typeref:struct:arp_header
BLUE	include/arp.h	23;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -I \/usr\/include\/pcap -I .\/include$/;"	m
CLOSE	include/arp.h	19;"	d
EXE	Makefile	/^EXE = arp_spoof$/;"	m
Ethh	include/arp.h	/^typedef struct ether_header Ethh;$/;"	t	typeref:struct:ether_header
GREEN	include/arp.h	21;"	d
GREP_MAC	include/arp.h	12;"	d
LD	Makefile	/^LD = ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -lpcap$/;"	m
MAC_FORMAT	include/arp.h	13;"	d
OBJ	Makefile	/^OBJ = arp_spoof.o arp.o$/;"	m
RED	include/arp.h	20;"	d
YELLOW	include/arp.h	22;"	d
arp_header	include/arp.h	/^typedef struct arp_header$/;"	s
bool	include/arp.h	/^typedef enum{false, true} bool;$/;"	t	typeref:enum:__anon1
dev_list	include/arp.h	/^pcap_if_t *dev_list;$/;"	v
dst_ip	include/arp.h	/^    u_int32_t       dst_ip;           \/* Target IP address  *\/$/;"	m	struct:arp_header
dst_mac	include/arp.h	/^    u_int8_t        dst_mac[ETH_ALEN];   \/* Target hardware address  *\/$/;"	m	struct:arp_header
error_buffer	include/arp.h	/^char error_buffer[PCAP_ERRBUF_SIZE];$/;"	v
false	include/arp.h	/^typedef enum{false, true} bool;$/;"	e	enum:__anon1
get_dev_list	src/arp.c	/^void get_dev_list(pcap_if_t **pdev_list) {$/;"	f
get_gateway_ip	src/arp.c	/^bool get_gateway_ip(struct in_addr* gateway_ip) {$/;"	f
get_ip	src/arp.c	/^bool get_ip(char *interface, char ip[]) {$/;"	f
get_mac_from_terminal	src/arp.c	/^bool get_mac_from_terminal(char *interface, u_char mac_addr[]) {$/;"	f
handle_packet	src/arp.c	/^void handle_packet(u_char* arg, const struct pcap_pkthdr* pkthdr, const u_char* packet) {  $/;"	f
hw_len	include/arp.h	/^    u_int8_t        hw_len;                 \/* Length of hardware address  *\/$/;"	m	struct:arp_header
hw_type	include/arp.h	/^    u_int16_t       hw_type;                \/* Format of hardware address  *\/$/;"	m	struct:arp_header
mac_addr	include/arp.h	/^char mac_addr[18];$/;"	v
mac_aton	src/arp.c	/^char* mac_aton(const char* str)$/;"	f
mac_net	include/arp.h	/^u_char mac_net[6];$/;"	v
mac_ntoa	src/arp.c	/^char* mac_ntoa(char* mac) {$/;"	f
main	src/arp_spoof.c	/^int main(int argc, char *argv[]) {$/;"	f
opcode	include/arp.h	/^    u_int16_t       opcode;                 \/* ARP opcode (command)  *\/$/;"	m	struct:arp_header
protocol_len	include/arp.h	/^    u_int8_t        protocol_len;           \/* Length of protocol address  *\/$/;"	m	struct:arp_header
protocol_type	include/arp.h	/^    u_int16_t       protocol_type;          \/* Format of protocol address  *\/$/;"	m	struct:arp_header
send_arp_packet	src/arp.c	/^void send_arp_packet(pcap_t *handle, u_char src_mac[ETH_ALEN], struct in_addr *src_ip, u_char dst_mac[ETH_ALEN], struct in_addr *dst_ip,  u_int16_t packet_type) {$/;"	f
show_dev_list	src/arp.c	/^void show_dev_list(pcap_if_t *dev_list) {$/;"	f
src_ip	include/arp.h	/^    u_int32_t       src_ip;           \/* Sender IP address  *\/ $/;"	m	struct:arp_header
src_mac	include/arp.h	/^    u_int8_t        src_mac[ETH_ALEN];   \/* Sender hardware address  *\/$/;"	m	struct:arp_header
true	include/arp.h	/^typedef enum{false, true} bool;$/;"	e	enum:__anon1
